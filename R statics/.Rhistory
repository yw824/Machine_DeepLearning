국어1 = sum(df['x1']); 국어1 = 국어1 / n ; 국어1
국어2 = sum(df['y1']); 국어2 = 국어2 / n ; 국어2
수학1 = sum(df['x3']); 수학1 = 수학1 / n ; 수학1
수학2 = sum(df['y3']); 수학2 = 수학2 / n ; 수학2
영어1 = sum(df['x2']); 영어1 = 영어1 / n ; 영어1
영어2 = sum(df['y2']); 영어2 = 영어2 / n ; 영어2
사회1 = sum(df['x4']); 사회1 = 사회1 / n ; 사회1
사회2 = sum(df['y4']); 사회2 = 사회2 / n ; 사회2
과학1 = sum(df['x5']); 과학1 = 과학1 / n ; 과학1
과학2 = sum(df['y5']); 과학2 = 과학2 / n ; 과학2
예체1 = sum(df['x6']); 예체1 = 예체1 / n ; 예체1
예체2 = sum(df['y6']); 예체2 = 예체2 / n ; 예체2
국어1 = sum((df['x1']-국어1)^2)
국어2 = sum((df['y1']-국어2)^2)
x = c(1095, 1110, 1086, 1074, 1098, 1105, 1163, 1124, 1088, 1064)
y = c(49, 52, 48, 49, 50, 51, 50, 51, 49, 48)
n = 10
tx = sum(x) ; mx = mean(x)
ty = sum(y) ; my = mean(y)
SXX = sum(x^2) - sum(x)^2/n
SYY = sum(y^2) - sum(y)^2/n
SXY = sum((mx-x)*(my-y))
rxy = SXY / (SXX*SYY) ; rxy
SXX = sum(x^2) - sum(x)^2/n ; SXX
SYY = sum(y^2) - sum(y)^2/n ; SYY
SXY = sum((mx-x)*(my-y)) ; SXY
rxy = SXY / sqrt(SXX*SYY) ; rxy # [1] 194.1
t0 = qt(0.975, n-2); t0
T0 = rxy * sqrt( (n-2)/ (1-rxy^2) ); T0
# (2)   유의수준 5%에서 원-달러 환율과 수출액 간에 상관계수가 0.9라고
#       할 수 있는지 검정하시오.
p0 = 0.9
Z0 = sqrt(n-3)*[ 1/2*log(exp((1+rxy)/(1-rxy)))-1/2*log(exp((1+p0)/(1-p0))) ]
Z0
Z0 = sqrt(n-3)*floor(1/2*log(exp((1+rxy)/(1-rxy)))-1/2*log(exp((1+p0)/(1-p0))))
Z0
y = c(53.655, 57.72, 52.128, 52.626, 54.9, 56.355, 58.15, 57.324, 57.312, 51.072)
tx = sum(x) ; mx = mean(x)
ty = sum(y) ; my = mean(y)
SXX = sum(x^2) - sum(x)^2/n ; SXX # [1] 7006.1
SYY = sum(y^2) - sum(y)^2/n ; SYY # [1] 16.1
SXY = sum((mx-x)*(my-y)) ; SXY
rxy = SXY / sqrt(SXX*SYY) ; rxy # 0.5779289
x = c(1095, 1110, 1086, 1074, 1098, 1105, 1163, 1124, 1088, 1064)
y = c(53.655, 57.72, 52.128, 52.626, 54.9, 56.355, 58.15, 57.324, 57.312, 51.072)
y = c(53.655, 57.72, 52.128, 52.626, 54.9, 56.355, 58.15, 57.324, 57.312, 51.072)
n = 10
tx = sum(x) ; mx = mean(x)
ty = sum(y) ; my = mean(y)
SXX = sum(x^2) - sum(x)^2/n ; SXX # [1] 7006.1
SYY = sum(y^2) - sum(y)^2/n ; SYY # [1] 16.1
SXY = sum((mx-x)*(my-y)) ; SXY
rxy = SXY / sqrt(SXX*SYY) ; rxy # 0.5779289
SXY = sum((mx-x)*(my-y)) ; SXY
x = c(1095, 1110, 1086, 1074, 1098, 1105, 1163, 1124, 1088, 1064)
y = c(53.655, 57.72, 52.128, 52.626, 54.9, 56.355, 58.15, 57.324, 57.312, 51.072)
# y2 = y*x/1000
n = 10
x = c(1095, 1110, 1086, 1074, 1098, 1105, 1163, 1124, 1088, 1064)
y = c(53.655, 57.72, 52.128, 52.626, 54.9, 56.355, 58.15, 57.324, 57.312, 51.072)
# y2 = y*x/1000
n = 10
tx = sum(x) ; mx = mean(x)
ty = sum(y) ; my = mean(y)
SXX = sum(x^2) - sum(x)^2/n ; SXX # [1] 7006.1
SYY = sum(y^2) - sum(y)^2/n ; SYY # [1] 60.88146
# y2 = y*x/1000
n = 10
tx = sum(x) ; mx = mean(x)
ty = sum(y) ; my = mean(y)
SXX = sum(x^2) - sum(x)^2/n ; SXX # [1] 7006.1
sum(y^2)
y = c(53.655, 57.72, 52.128, 52.626, 54.9, 56.355, 58.15, 57.324, 53.312, 51.072)
# y2 = y*x/1000
n = 10
tx = sum(x) ; mx = mean(x)
ty = sum(y) ; my = mean(y)
SXX = sum(x^2) - sum(x)^2/n ; SXX # [1] 7006.1
SYY = sum(y^2) - sum(y)^2/n ; SYY # [1] 60.88146
SYY = sum(y^2) - sum(y)^2/n ; SYY # [1] 57.77906
SXY = sum((mx-x)*(my-y)) ; SXY
0.7806636
SXY = sum((mx-x)*(my-y)) ; SXY
rxy = SXY / sqrt(SXX*SYY) ; rxy # 0.7806636
# (1)   유의수준 5%에서 원-달러 환율과 수출액 간에 상관관계가 있다고
#       할 수 있는지 검정하시오.
T0 = rxy * sqrt( (n-2)/ (1-rxy^2) ); T0 # [1] 2.003009
target = qt(0.975, n-2); target # 2.306004
Z0 = Z0*floor(temp1 - temp2) ; Z0
# (2)   유의수준 5%에서 원-달러 환율과 수출액 간에 상관계수가 0.9라고
#       할 수 있는지 검정하시오.
p0 = 0.9
Z0 = sqrt(n-3)
temp1 = 1/2 * log((1+rxy)/(1-rxy))
temp2 = 1/2 * log((1+p0)/(1-p0))
Z0 = Z0*floor(temp1 - temp2) ; Z0
temp1 = 1/2 * log((1+rxy)/(1-rxy)) ; temp1
temp2 = 1/2 * log((1+p0)/(1-p0)) ; temp2
Z0 = Z0*(temp1 - temp2) ; Z0 # [1] -2.645751
# (2)   유의수준 5%에서 원-달러 환율과 수출액 간에 상관계수가 0.9라고
#       할 수 있는지 검정하시오.
p0 = 0.9
temp1 = 1/2 * log((1+rxy)/(1-rxy)) ; temp1 # 1.381075
temp2 = 1/2 * log((1+p0)/(1-p0)) ; temp2 # 1.472219 - OK
Z0 = sqrt(n-3)*(temp1 - temp2)
source("C:/wd/5학기 확률통계/14-week10.R", encoding = 'UTF-8')
Z0
target = qnorm(0.975)
target = qnorm(0.975) ; target
?qnorm
# -----------------------------------------[예제 14-5]------------------------
# 앞의 [예제 14-4]의 데이터를 사용하여 산점도를 작성하고 ,
# 직선 회귀식을 표시하시오.
x = c(1095, 1110, 1086, 1074, 1098, 1105, 1163, 1124, 1088, 1064)
y2 = c(53.655, 57.72, 52.128, 52.626, 54.9, 56.355, 58.15, 57.324, 53.312, 51.072)
# y2 = y*x/1000
n = 10
tx = sum(x) ; mx = mean(x)
ty = sum(y2) ; my = mean(y2)
SXX = sum(x^2) - sum(x)^2/n ; SXX # [1] 7006.1
SYY = sum(y2^2) - sum(y2)^2/n ; SYY # [1] 57.77906
SXY = sum((mx-x)*(my-y2)) ; SXY
rxy = SXY / sqrt(SXX*SYY) ; rxy # 0.8811918
corr.reg1(x, y2, xl="환율", y2="수출액", step=6)
corr.reg1(x, y2, xl="환율", yl="수출액", step=6)
sxx = txpow + tx^2/n ; sxx
tx = 11007
txpow = 12122411
n = 10
meanx = tx/n
sxx = txpow + tx^2/n ; sxx
meanx = tx/n ; meanx
sxx = txpow - tx^2/n ; sxx
ty = 547.242
typow = 602909.922
meany = ty/n ; meany
syy = typow - ty^2/n ; syy
x = c(1095, 1110, 1086, 1074, 1098, 1105, 1163, 1124, 1088, 1064)
y2 = c(53.655, 57.72, 52.128, 52.626, 54.9, 56.355, 58.15, 57.324, 53.312, 51.072)
# y2 = y*x/1000
n = 10
tx = sum(x) ; mx = mean(x)
ty = sum(y2) ; my = mean(y2)
SXX = sum(x^2) - sum(x)^2/n ; SXX # [1] 7006.1
SYY = sum(y2^2) - sum(y2)^2/n ; SYY # [1] 57.77906
SXY = sum((mx-x)*(my-y2)) ; SXY
rxy = SXY / sqrt(SXX*SYY) ; rxy # 0.8811918
tx = sum(x) ; mx = mean(x)
ty = sum(y2) ; my = mean(y2)
SXX = sum(x^2) - sum(x)^2/n ; SXX # [1] 7006.1
SYY = sum(y2^2) - sum(y2)^2/n ; SYY # [1] 57.77906
SXY = sum((mx-x)*(my-y2)) ; SXY
rxy = SXY / sqrt(SXX*SYY) ; rxy # 0.8811918
B1^ = SXY / SXX ; B1^
B1_ = SXY / SXX ; B1_
B0_ = my - B1_*mx ; B0_
SXY = sum((mx-x)*(my-y2)) ; SXY
tx = sum(x) ; tx
mx = mean(x); mx
ty = sum(y2) ; ty
my = mean(y2) ; my
corr.reg1(x, y2, xl = "환율", yl = "수출액", step=7)
library(Rstat)
x = c(1095, 1110, 1086, 1074, 1098, 1105, 1163, 1124, 1088, 1064)
y2 = c(53.655, 57.72, 52.128, 52.626, 54.9, 56.355, 58.15, 57.324, 53.312, 51.072)
# y2 = y*x/1000
n = 10
tx = sum(x) ; tx
mx = mean(x); mx # [1] 1100.7
ty = sum(y2) ; ty
my = mean(y2) ; my # [1] 54.7242
SXX = sum((mx-x)^2) ; SXX
SYY = sum((my-y2)^2) ; SYY
SXY = sum((mx-x)*(my-y2)); SXY
SST = sum((my-y2)^2) ; SST
SST = sum((my-y2)^2) ; SST # 57.77906
SSR = SXY^2/SSX ; SSR
SSR = SXY^2/SXX ; SSR
SSE = SST - SSR ; SSE
MSR = SSR / 1 ; MSR
MSE = SSE / (n-2) ; MSE
result = MSR / MSE ; MSR ; result
target = qf(0.95, n-2) ; target
?qf
target = qf(0.95, 1, 8) ; target #
corr.reg1(x, y2, step=8)
tx = sum(x) ; tx
mx = mean(x); mx # [1] 1100.7
ty = sum(y2) ; ty
my = mean(y2) ; my # [1] 54.7242
sxx = sum((x-mx)^2)
syy = sum((y2-my)^2)
sxy = sum((x-mx)*(y2-my))
B1_ = sxy-sxx ; B1_
sxx = sum((x-mx)^2) ; sxx
syy = sum((y2-my)^2) ; syy
sxy = sum((x-mx)*(y2-my)) ; sxy
B1_ = sxy-sxx ; B1_
B1_ = sxy/sxx ; B1_
B0_ = my - B1_*mx ; B0_
SST = sum((y2-my)^2)
SSR = (sxy)^2/sxx
SSE = SST - SSR
SST = sum((y2-my)^2)
SSR = (sxy)^2/sxx
SSE = SST - SSR
MSR = SSR / 1
MSE = SSE / (n-2)
# B1 신뢰구간
max = B1_ + qt(0.975, n-2)*sqrt(MSE*(1/n + mx^2/sxx)) ; max
min = B1_ - qt(0.975, n-2)*sqrt(MSE*(1/n + mx^2/sxx)) ; min
MSR = SSR / 1 ; MSR # 44.86538
MSE = SSE / (n-2) ; MSE # 44.86538
SST = sum((y2-my)^2) ; SST # 57.77906
SSR = (sxy)^2/sxx ; SSR # 44.86538
SSE = SST - SSR ; SSE # 12.91368
MSR = SSR / 1 ; MSR # 44.86538
# y2 = y*x/1000
n = 10
MSE = SSE / (n-2) ; MSE # 44.86538
MSE = SSE / (n-2) ; MSE # 44.86538
qt(0.975, n-2)
# B1 신뢰구간
max = B1_ + qt(0.975, n-2)*sqrt(MSE*(1/n + mx^2/sxx)) ; max # 38.61866
min = B1_ - qt(0.975, n-2)*sqrt(MSE*(1/n + mx^2/sxx)) ; min # -38.45862
B1_ = sxy/sxx ; B1_ # 0.08002349
B0_ = my - B1_*mx ; B0_ # -33.35766
SST = sum((y2-my)^2) ; SST # 57.77906
SSR = (sxy)^2/sxx ; SSR # 44.86538
SSE = SST - SSR ; SSE # 12.91368
MSR = SSR / 1 ; MSR # 44.86538
MSE = SSE / (n-2) ; MSE # 1.61421
# B1 신뢰구간
max = B1_ + qt(0.975, n-2)*sqrt(MSE*(1/n + mx^2/sxx)) ; max # 38.61866
min = B1_ - qt(0.975, n-2)*sqrt(MSE*(1/n + mx^2/sxx)) ; min # -38.45862
# B1 신뢰구간
max = B1_ + qt(0.975, n-2)*sqrt(MSE/sxx) ; max # 38.61866
min = B1_ - qt(0.975, n-2)*sqrt(MSE/sxx) ; min # -38.45862
qt(0.975, n-2)
target = B1_ / sqrt(MSE/sxx) ; target
# B0 신뢰구간
max = B0_ + qt(0.975, n-2)*sqrt(MSE*(1/n + mx^2/sxx)); max
min = B0_ - qt(0.975, n-2)*sqrt(MSE*(1/n + mx^2/sxx)); min
target = B0_ / sqrt(MSE*(1/n+mx^2/sxx))
# B1 신뢰구간
max = B1_ + qt(0.975, n-2)*sqrt(MSE/sxx) ; max # 0.1150262
max = (B0_ + B1_*x0) + qt(0.975, n-2)*sqrt( MSE*(1/n + (x0-mx)^2/sxx) )
max = (B0_ + B1_*x0) - qt(0.975, n-2)*sqrt( MSE*(1/n + (x0-mx)^2/sxx) )
# E(y|x0=1200) 의 100(1-a)% 신뢰구간
x0 = 1200
max = (B0_ + B1_*x0) + qt(0.975, n-2)*sqrt( MSE*(1/n + (x0-mx)^2/sxx) )
max = (B0_ + B1_*x0) - qt(0.975, n-2)*sqrt( MSE*(1/n + (x0-mx)^2/sxx) )
max
min
B0_ + B1_*x0
a = 0.95
a = 0.05
# y|x0 의 100(1-a)% 예측구간
max = (B0_+_B1_*x0) +- qt(0.975, n-2)*sqrt( MSE*(1 + 1/n + (x0-mx)^2/sxx) )
q
q
max = (B0_ + B1_*x0) + qt(0.975, n-2)*sqrt( MSE*(1/n + (x0-mx)^2/sxx) )
min = (B0_ + B1_*x0) - qt(0.975, n-2)*sqrt( MSE*(1/n + (x0-mx)^2/sxx) )
max # [1] 59.0734
min # [1] -71.8963
max
min
5.272004
# y|x0 의 100(1-a)% 예측구간
max = (B0_ + B1_*x0) +- qt(0.975, n-2)*sqrt( MSE*(1 + 1/n + (x0-mx)^2/sxx) )
min = (B0_ + B1_*x0) +- qt(0.975, n-2)*sqrt( MSE*(1 + 1/n + (x0-mx)^2/sxx) )
max = (B0_ + B1_*x0) + qt(0.975, n-2)*sqrt( MSE*(1/n + (x0-mx)^2/sxx) )
min = (B0_ + B1_*x0) - qt(0.975, n-2)*sqrt( MSE*(1/n + (x0-mx)^2/sxx) )
# y|x0 의 100(1-a)% 예측구간
max = (B0_ + B1_*x0) +- qt(0.975, n-2)*sqrt( MSE*(1 + 1/n + (x0-mx)^2/sxx) )
min = (B0_ + B1_*x0) +- qt(0.975, n-2)*sqrt( MSE*(1 + 1/n + (x0-mx)^2/sxx) )
max # [1] 66.26767
min
( MSE*(1 + 1/n + (x0-mx)^2/sxx) )
# y|x0 의 100(1-a)% 예측구간
max = (B0_ + B1_*x0) + qt(0.975, n-2)*sqrt( MSE*(1 + 1/n + (x0-mx)^2/sxx) )
min = (B0_ + B1_*x0) - qt(0.975, n-2)*sqrt( MSE*(1 + 1/n + (x0-mx)^2/sxx) )
max # [1] 66.26767
min
B0_ + B1_*x0 # 62.67053
max = (B0_ + B1_*x0) + qt(0.975, n-2)*sqrt( MSE*(1/n + (x0-mx)^2/sxx) )
min = (B0_ + B1_*x0) - qt(0.975, n-2)*sqrt( MSE*(1/n + (x0-mx)^2/sxx) )
max # [1] 66.26767
min # [1] 59.0734
B0_ + B1_*x0 # 62.67053
max = (B0_ + B1_*x0) + qt(0.975, n-2)*sqrt( MSE*(1/n + (x0-mx)^2/sxx) )
min = (B0_ + B1_*x0) - qt(0.975, n-2)*sqrt( MSE*(1/n + (x0-mx)^2/sxx) )
max # [1] 66.26767
min # [1] 59.0734
# -------------------------예제 14-10------------------------------------------
data(exa14_10)
df = data.frame(exa14_10)
print(df)
library(Rstat)
# -------------------------예제 14-10------------------------------------------
data(exa14_10)
df = data.frame(exa14_10)
print(df)
print(df['성적'])
print(df['국어'])
print(df['독서'])
df = data.frame(exa14_10)
#print(df['성적']) ; print(df['국어']) ; print(df['독서'])
attach(exa14_10)
xd = data.frame(국어, 독서); form = 성적 ~ 국어 + 독서
corr.mreg(xd, 성적, form, step=0:1)
x
x = matrix(temp, ncol=1)
x
temp = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
mat = matrix(temp, ncol=1)
mat
mat <- df['국어']
mat
mat = matrix(df['학습'], ncol = 1)
temp = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
mat = matrix(df['학습'], ncol = 1)
df = data.frame(exa14_10)
n = 16
y = df['성적']
temp = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
mat = matrix(df['학습'], ncol = 1)
mat = matrix(df['독서'], ncol = 1)
mat <- cbind(df['국어'])
mat <- cbind(temp)
mat
xd = data.frame(국어, 독서); form = 성적 ~ 국어 + 독서
corr.mreg(xd, 성적, form, step=0:1)
source("C:/wd/5학기 확률통계/15-week12.R", encoding = 'UTF-8')
# x' = sum(xi*fi) / sum(fi)
x_ = sum(x*f)/sum(f) ; x
# 귀무가설
x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
f = c(1, 1, 0, 0, 1, 0, 1, 7, 5, 4)
# x' = sum(xi*fi) / sum(fi)
x_ = sum(x*f)/sum(f) ; x
# x' = sum(xi*fi) / sum(fi)
x_ = sum(x*f)/sum(f) ; x
# x' = sum(xi*fi) / sum(fi)
x_ = sum(x*f)/sum(f) ; x_
spow = ( sum(x^2 * f) - ( (sum(x*f))^2/n ) ) / (n-1) ; spow
n = 20
# 귀무가설
x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
f = c(1, 1, 0, 0, 1, 0, 1, 7, 5, 4)
n = 20
# x' = sum(xi*fi) / sum(fi)
# s^2 = ( sum(xi^2 * fi) - (sum(xi*fi))^2/n ) / (n-1)
x_ = sum(x*f)/sum(f) ; x_ # 7.8
spow = ( sum(x^2 * f) - ( (sum(x*f))^2/n ) ) / (n-1) ; spow
#T0 = (x' - 7)/sqrt(s^2/n)
T0 = (x_-7)/sqrt(spow/n) ; T0
target = qt(0.95, n-1) ; target
signtest.plot(x, mu0=7, side="up")
x = c(1,2,5,7, rep(8, 7), rep(9, 5), rep(10, 4))
signtest.plot(x, mu0=7, side="up")
x
signtest.plot(x, mu0=7, side="up")
install.packages(randomizeBE)
install.packages(randomizeBE)
install.packages("randomizeBE")
# ----------------------------예제 15-3 ---------------------------------------
# 런 검정통계량의 하한 , 상한 기각치 표를 작성하시오.
# ( n1, n2 = 2, 3, ,,, 20 )
library(randomizeBE)
# 그래프 출력
runs.dist(n1=c(5, 20), n2=c(5, 20), tab=False, plot=True)
# 그래프 출력
runs.dist(n1=c(5, 20), n2=c(5, 20), tab=FALSE, plot=TRUE)
# 런 검정 분포 함수 runs.dist() 실행
runs.dist(n1=2:20, n2=2:20)
# 그래프 출력
runs.dist(n1=c(5, 20), n2=c(5, 20), tab=FALSE, plot=TRUE)
# 그래프 출력
runs.dist(n1=c(5, 20), n2=c(5, 20), tab=FALSE, plot=TRUE)
# 그래프 출력
runs.dist(n1=c(5,5, 20, 20), n2=c(5,20, 5, 20), tab=FALSE, plot=TRUE)
x=c(1,1,0,0,1,0,rep(1,7), rep(0,7))
runtest.plot(x)
runstest.plot(x)
runs.dist(n1=20, n2=30)
ur = 2*(n1*n2)/(n1+n2)+1 ; ur
n1 = 20 ; n2 = 30
R = 18
runs.dist(n1=20, n2=30)
ur = 2*(n1*n2)/(n1+n2)+1 ; ur
σr = 2*n1*n2(2*n1*n2-n1-n2)/( (n1+n2)^2*(n1+n2-1) ); σr
μr = 2*(n1*n2)/(n1+n2)+1 ; μr # 25
σr = 2*n1*n2(2*n1*n2-n1-n2)/( (n1+n2)^2*(n1+n2-1) ); σr
n1 = 20 ; n2 = 30
σr = 2*n1*n2*(2*n1*n2-n1-n2)/( (n1+n2)^2*(n1+n2-1) ); σr
Z = abs(R+0.5-μr)/σr ; Z
R = 18
Z = abs(R+0.5-μr)/σr ; Z
μr = 2*(n1*n2)/(n1+n2)+1 ; μr # 25
σr = 2*n1*n2*(2*n1*n2-n1-n2)/( (n1+n2)^2*(n1+n2-1) ); σr # 11.26531
Z = abs(R+0.5-μr)/σr ; Z
σrpow = 2*n1*n2*(2*n1*n2-n1-n2)/( (n1+n2)^2*(n1+n2-1) ); σrpow # 11.26531
σr = sqrt(σrpow)
Z = abs(R+0.5-μr)/σr ; Z
target = qnorm(0.975); target # Z0.975 :
data(exa15_6)
data("exa15_6")
force(exa15_6)
View(exa15_6)
df['x']
data(exa15_6)
df = data.frame(exa15_6)
df['x']
x
sumx = sum(df['x']) ; sumx
sumxpow = sum(df['x']^2) ; sumxpow
sxx =
sumy = sum(df['y']) ; sumy
sumypow = sum(df['y']^2) ; sumypow
sxx = sumpow - sumx^2/n ; sxx
sxx = sumxpow - sumx^2/n ; sxx
df = data.frame(exa15_6)
x = df['x']
sumx = sum(df['x']) ; sumx # 75
sumxpow = sum(df['x']^2) ; sumxpow # 505
sxx = sumxpow - sumx^2/n ; sxx
# Pearson의 상관계수
n = 16
sxx = sumxpow - sumx^2/n ; sxx
syy = sumypow - sumy^2/n ; syy
sxy = sum(x*y) - sumx * sumy / n ; sxy
y = df['y']
sumy = sum(df['y']) ; sumy # 1311
sumypow = sum(df['y']^2) ; sumypow # 108241
syy = sumypow - sumy^2/n ; syy # 820.9375
sxy = sum(x*y) - sumx * sumy / n ; sxy
r = sxy / sqrt(sxx*syy)
r = sxy / sqrt(sxx*syy) ; r
# Spearman의 순위 상관계수
# 순위1 : 사교육을 많이 한 순위( 많을 수록 뒤로 )
# 순위2 : 성적이 높은 순위 ( 많을 수록 뒤로 )
# 동석차가 있으면 0.5씩 나눠 가진다. 가령 13등이 2명이면 그 다음은 15등인데
# 13.5 , 13.5로 나눠 가진다.
x = c(16, 12, 1.5, 3, 9, 4.5, 13.5, 10.5, 7.5, 15, 6, 1.5, 4.5, 7.5, 10.5, 13.5)
y = c(2, 4, 15, 1, 6, 8, 14, 11, 8, 3, 13, 16, 7, 12, 10, 5)
di = c(14, 8, 13.5, 2, 3, 3.5, 0.5, 0.5, 1.5, 12, 7, 14.5, 2.5, 4.5, 0.5, 8.5 )
rs = 1 - 6*sum(di^2)/(n*n^2-1) ; rs
y = c(2, 4, 15, 1, 6, 8, 14, 11, 9, 3, 13, 16, 7, 12, 10, 5)
di = c(14, 8, 13.5, 2, 3, 3.5, 0.5, 0.5, 1.5, 12, 7, 14.5, 2.5, 4.5, 0.5, 8.5 )
rs = 1 - 6*sum(di^2)/(n*n^2-1) ; rs # -0.4249084
# Spearman의 순위 상관계수
# 순위1 : 사교육을 많이 한 순위( 많을 수록 뒤로 )
# 순위2 : 성적이 높은 순위 ( 많을 수록 뒤로 )
# 동석차가 있으면 0.5씩 나눠 가진다. 가령 13등이 2명이면 그 다음은 15등인데
# 13.5 , 13.5로 나눠 가진다.
x = c(16, 12, 1.5, 3, 9, 4.5, 13.5, 10.5, 7.5, 15, 6, 1.5, 4.5, 7.5, 10.5, 13.5)
# Pearson의 상관계수
n = 16
# Spearman의 순위 상관계수
# 순위1 : 사교육을 많이 한 순위( 많을 수록 뒤로 )
# 순위2 : 성적이 높은 순위 ( 많을 수록 뒤로 )
# 동석차가 있으면 0.5씩 나눠 가진다. 가령 13등이 2명이면 그 다음은 15등인데
# 13.5 , 13.5로 나눠 가진다.
x = c(16, 12, 1.5, 3, 9, 4.5, 13.5, 10.5, 7.5, 15, 6, 1.5, 4.5, 7.5, 10.5, 13.5)
y = c(2, 4, 15, 1, 6, 8, 14, 11, 9, 3, 13, 16, 7, 12, 10, 5)
di = c(14, 8, 13.5, 2, 3, 3.5, 0.5, 0.5, 1.5, 12, 7, 14.5, 2.5, 4.5, 0.5, 8.5 )
rs = 1 - 6*sum(di^2)/(n*n^2-1) ; rs # -0.4249084
Srxrx = sum(x^2) - (sum(x))^2/n ; srxrx
srxrx = sum(x^2) - (sum(x))^2/n ; srxrx
sryry = sum(y^2) - (sum(y))^2/n ; sryry
srxry = sum(x*y) - sum(x)*sum(y)/n ; srxry
rs = srxry / ( srxrx * srxry ) ;
rs = srxry / ( srxrx * srxry ) ; rs
rs = srxry / sqrt( srxrx * srxry ) ; rs
rs = srxry / sqrt( srxrx * sryry ) ; rs
library(Rstat)
library(randomizeBE)
# 확률분포 그래프 (n2 = 10 , n1 = 2, 4, 6, 8) => 그림 15-7
ranksum.dist(n1=c(2,4,6,8), n2=10, tab=FALSE, plot=TRUE)
# 함수 ranksum.dist() 실행 => 누적분포 표 작성
ranksum.dist(n2 = 3:10)
R1 = 1 + 3 + 4 + 8 + 8 + 8 + 14  # 인문계열 46
R2 = 2 + 8*4 + 14*4 + 18.5*4  # 자연계열 164
# 최소 순위를 뺴준다.
U1 = R1 - n1*(n1+1)/2 ; U1
U2 = R2 - n2*(n2+1)/2 ; U2
# ------------------------예제 15-8 -------------------------------------------
# 앞의 예15-1에서 인문계열 학생 7명의 만족도와 자연계열 학생 13명의 만족도,
# 인문계열 학생의 만족도와 자연계열 학생의 만족도 간에 차이가 있는지
# 유의수준 5%에서 검정하여라.
n1 = 7 ; n2 = 13
# 최소 순위를 뺴준다.
U1 = R1 - n1*(n1+1)/2 ; U1
U2 = R2 - n2*(n2+1)/2 ; U2
U1 + U2 #
# 2*pwilcox(U1, n1, n2) ( 양측 검정이기 때문에 2 곱한다. )
pwilcox(U1, n1, n2) #
# 2*pwilcox(U1, n1, n2) ( 양측 검정이기 때문에 2 곱한다. )
2* pwilcox(U1, n1, n2) #
# 함수 signrank.dist() 실행 => 표
signrank.dist(nv=5:50)
# 가설 H0-> mu1 = mu2 , H0 : mu1 > mu2 로 설정한다.
# 투약 전과 투약 후의 차이를 구하고 절댓값의 순위를 구하여 다음과 같은
# 표를 작성한다.
di = x - y ; di
x = c(38, 26, 34, 5, 68, 30, 35, 19, 33, 69)
y = c(28, 21, 31, 11, 59, 28, 28, 23, 32, 38)
# 가설 H0-> mu1 = mu2 , H0 : mu1 > mu2 로 설정한다.
# 투약 전과 투약 후의 차이를 구하고 절댓값의 순위를 구하여 다음과 같은
# 표를 작성한다.
di = x - y ; di
